!function(e){"use strict";e.module("influents-elastic-builder",["RecursionHelper","ui.bootstrap"])}(window.angular),function(e){"use strict";e.module("influents-elastic-builder").directive("elasticBuilder",["elasticQueryService",function(e){return{scope:{data:"=elasticBuilder"},templateUrl:"influents-elastic-builder/BuilderDirective.html",link:function(n){var t=n.data;n.filters=[],n.removeChild=function(e){n.filters.splice(e,1)},n.addRule=function(){n.filters.push({})},n.addGroup=function(){n.filters.push({type:"group",subType:"and",rules:[]})},n.$watch("data.needsUpdate",function(i){i&&(n.filters=e.toFilters(t.query,n.data.fields),n.data.needsUpdate=!1)}),n.$watch("filters",function(i){i&&(t.query=e.toQuery(n.filters,n.data.fields))},!0)}}}])}(window.angular),function(e){"use strict";e.module("influents-elastic-builder").directive("elasticBuilderChooser",["RecursionHelper","groupClassHelper",function(e,n){return{scope:{elasticFields:"=",item:"=elasticBuilderChooser",onRemove:"&"},templateUrl:"influents-elastic-builder/ChooserDirective.html",compile:function(t){return e.compile(t,function(e,t,i){var a=e.depth=+i.depth,l=e.item;e.getGroupClassName=function(){var e=a;return"group"===l.type&&e++,n(e)}})}}}])}(window.angular),function(e){"use strict";e.module("influents-elastic-builder").directive("elasticBuilderGroup",["RecursionHelper","groupClassHelper",function(e,n){return{scope:{elasticFields:"=",group:"=elasticBuilderGroup",onRemove:"&"},templateUrl:"influents-elastic-builder/GroupDirective.html",compile:function(t){return e.compile(t,function(e,t,i){var a=e.depth=+i.depth,l=e.group;e.addRule=function(){l.rules.push({})},e.addGroup=function(){l.rules.push({type:"group",subType:"and",rules:[]})},e.removeChild=function(e){l.rules.splice(e,1)},e.getGroupClassName=function(){return n(a+1)}})}}}])}(window.angular),function(e){"use strict";e.module("influents-elastic-builder").directive("elasticBuilderRule",[function(){return{scope:{elasticFields:"=",rule:"=elasticBuilderRule",onRemove:"&"},templateUrl:"influents-elastic-builder/RuleDirective.html",link:function(e){e.getType=function(){var n=e.elasticFields,t=e.rule.field;if(n&&t)return"boolean"===n[t].subType?"boolean":n[t].type}}}}])}(window.angular),function(e){"use strict";e.module("influents-elastic-builder").directive("elasticType",[function(){return{scope:{type:"=elasticType",rule:"=",guide:"="},template:'<ng-include src="getTemplateUrl()" />',link:function(e){function n(e){var n=e.date;return"day"===e.mode&&(0===n.getDay()||6===n.getDay())}e.getTemplateUrl=function(){var n=e.type;if(n)return"influents-elastic-builder/types/"+(n=n.charAt(0).toUpperCase()+n.slice(1))+".html"},e.booleans=["False","True"],e.booleansOrder=["True","False"],e.inputNeeded=function(){return~["equals","notEquals","gt","gte","lt","lte"].indexOf(e.rule.subType)},e.numberNeeded=function(){return~["last","next"].indexOf(e.rule.subType)},e.today=function(){e.rule.date=new Date},e.today(),e.clear=function(){e.rule.date=null},e.dateOptions={dateDisabled:n,formatYear:"yy",maxDate:new Date(2018,1,13),minDate:new Date,startingDay:1},e.open1=function(){e.popup1.opened=!0},e.setDate=function(n,t,i){e.rule.date=new Date(n,t-1,i)},e.formats=["yyyy-MM-ddTHH:mm:ss","yyyy-MM-ddTHH:mm:ssZ","yyyy-MM-dd","dd-MMMM-yyyy","yyyy/MM/dd","shortDate"],e.rule.dateFormat=e.formats[0],e.format=e.rule.dateFormat,e.altInputFormats=["M!/d!/yyyy"],e.popup1={opened:!1}}}}])}(window.angular),function(e){"use strict";e.module("influents-elastic-builder").factory("groupClassHelper",function(){return function(e){var n=["","list-group-item-info","list-group-item-success","list-group-item-warning","list-group-item-danger"];return n[e%n.length]}})}(window.angular),function(e){"use strict";function n(e,n){return e.map(i.bind(e,n))}function t(e,n,t){return e.map(a.bind(e,n,t)).filter(function(e){return!!e})}function i(n,t,a){!1!==a&&(a=!0);var r=Object.keys(t)[0],u={or:"group",and:"group",range:"number"},o=u[r]||"item",s=l(o);switch(r){case"or":case"and":s.rules=t[r].map(i.bind(t,n)),s.subType=r;break;case"missing":case"exists":s.field=t[r].field,s.subType={exists:"exists",missing:"notExists"}[r],delete s.value;break;case"term":case"terms":s.field=Object.keys(t[r])[0];var d=n[Object.keys(t[r])[0]];if("multi"===d.type){var c=t[r][s.field];"string"==typeof c&&(c=[c]),s.values=d.choices.reduce(function(e,n){return e[n]=-1!==t[r][s.field].indexOf(n),e},{})}else s.subType=a?"equals":"notEquals",s.value=t[r][s.field],"number"==typeof s.value&&(s.subType="boolean");break;case"query":s.field=Object.keys(t.query.match)[0];var d=n[Object.keys(t.query.match)[0]];if("multi"===d.type){var c=t.query.match[s.field];"string"==typeof c&&(c=[c]),s.values=d.choices.reduce(function(e,n){return e[n]=-1!==t[r][s.field].indexOf(n),e},{})}else s.subType=a?"equals":"notEquals",s.value=t.query.match[s.field].query,"number"==typeof s.value&&(s.subType="boolean");break;case"range":var p,m;if(s.field=Object.keys(t[r])[0],s.subType=Object.keys(t[r][s.field])[0],e.isNumber(t[r][s.field][s.subType])){s.value=t[r][s.field][s.subType];break}if(e.isDefined(Object.keys(t[r][s.field])[1])){if(p=t[r][s.field].gte,~p.indexOf("now-")){s.subType="last",s.value=parseInt(p.split("now-")[1].split("d")[0]);break}if(~p.indexOf("now")){s.subType="next",p=t[r][s.field].lte,s.value=parseInt(p.split("now+")[1].split("d")[0]);break}s.subType="equals",m=p.split("T")[0].split("-"),s.date=m[2]+"/"+m[1]+"/"+m[0];break}p=t[r][s.field][s.subType],m=p.split("T")[0].split("-"),s.date=m[2]+"/"+m[1]+"/"+m[0];break;case"not":s=i(n,t[r].filter,!1);break;default:s.field=Object.keys(t[r])[0]}return s}function a(n,t,i){var l={};if("group"===i.type)return l[i.subType]=i.rules.map(a.bind(i,n,t)).filter(function(e){return!!e}),l;var u=i.field,o=n[u];if(u){switch(o.type){case"term":if("boolean"===o.subType&&(i.subType="boolean"),!i.subType)return;switch(i.subType){case"equals":case"boolean":if(void 0===i.value)return;l.query={match:{}},l.query.match[u]={query:i.value,operator:"and"};break;case"notEquals":if(void 0===i.value)return;l.not={filter:{query:{match:{}}}},l.not.filter.query.match[u]={query:i.value,operator:"and"};break;case"exists":l.exists={field:u};break;case"notExists":l.missing={field:u};break;default:throw new Error("unexpected subtype "+i.subType)}break;case"number":l.range={},l.range[u]={},l.range[u][i.subType]=i.value;break;case"date":if(!i.subType)return;switch(i.subType){case"equals":if(!e.isDate(i.date))return;l.term={},l.term[u]=r(t,i.date,i.dateFormat);break;case"lt":case"lte":if(!e.isDate(i.date))return;l.range={},l.range[u]={},l.range[u][i.subType]=r(t,i.date,i.dateFormat);break;case"gt":case"gte":if(!e.isDate(i.date))return;l.range={},l.range[u]={},l.range[u][i.subType]=r(t,i.date,i.dateFormat);break;case"last":if(!e.isNumber(i.value))return;l.range={},l.range[u]={},l.range[u].gte="now-"+i.value+"d",l.range[u].lte="now";break;case"next":if(!e.isNumber(i.value))return;l.range={},l.range[u]={},l.range[u].gte="now",l.range[u].lte="now+"+i.value+"d";break;case"exists":l.exists={field:u};break;case"notExists":l.missing={field:u};break;default:throw new Error("unexpected subtype "+i.subType)}break;case"multi":l.terms={},l.terms[u]=Object.keys(i.values||{}).reduce(function(e,n){return i.values[n]&&e.push(n),e},[]);break;default:throw new Error("unexpected type")}return l}}function l(n){var t={group:{type:"group",subType:"",rules:[]},item:{field:"",subType:"",value:""},number:{field:"",subType:"",value:null}};return e.copy(t[n])}function r(n,t,i){return!!e.isDate(t)&&n("date")(t,i)}e.module("influents-elastic-builder").factory("elasticQueryService",["$filter",function(e){return{toFilters:n,toQuery:function(n,i){return t(n,i,e)}}}])}(window.angular),function(e){"use strict";e.module("influents-elastic-builder").run(["$templateCache",function(e){e.put("influents-elastic-builder/BuilderDirective.html",'<div class="elastic-builder">\n  <div class="filter-panels">\n    <div class="list-group form-inline">\n      <div\n        data-ng-repeat="filter in filters"\n        data-elastic-builder-chooser="filter"\n        data-elastic-fields="data.fields"\n        data-on-remove="removeChild($index)"\n        data-depth="0"></div>\n      <div class="list-group-item actions">\n        <md-button class="md-icon-button md-accent" aria-label="Add Rule" title="Add Rule" data-ng-click="addRule()">\n          <md-icon md-font-icon="icon-plus"></md-icon>\n        </md-button>\n        \x3c!-- <md-button class="md-icon-button md-accent" aria-label="Add Group" title="Add Group" data-ng-click="addGroup()">\n          <md-icon md-font-icon="icon-view-list"></md-icon>\n        </md-button> --\x3e\n      </div>\n    </div>\n  </div>\n</div>\n'),e.put("influents-elastic-builder/ChooserDirective.html",'<div\n  class="list-group-item elastic-builder-chooser"\n  data-ng-class="getGroupClassName()">\n\n  <div data-ng-if="item.type === \'group\'"\n    data-elastic-builder-group="item"\n    data-depth="{{ depth }}"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n  <div data-ng-if="item.type !== \'group\'"\n    data-elastic-builder-rule="item"\n    data-elastic-fields="elasticFields"\n    data-on-remove="onRemove()"></div>\n\n</div>\n'),e.put("influents-elastic-builder/GroupDirective.html",'<div class="elastic-builder-group">\n  <h5>If\n    <select data-ng-model="group.subType" class="form-control">\n      <option value="and">all</option>\n      <option value="or">any</option>\n    </select>\n    of these conditions are met\n  </h5>\n  <div\n    data-ng-repeat="rule in group.rules"\n    data-elastic-builder-chooser="rule"\n    data-elastic-fields="elasticFields"\n    data-depth="{{ +depth + 1 }}"\n    data-on-remove="removeChild($index)"></div>\n\n  <div class="list-group-item actions" data-ng-class="getGroupClassName()">\n    <a class="btn btn-xs btn-primary" title="Add Sub-Rule" data-ng-click="addRule()">\n      <i class="fa fa-plus"></i>\n    </a>\n    <a class="btn btn-xs btn-primary" title="Add Sub-Group" data-ng-click="addGroup()">\n      <i class="fa fa-list"></i>\n    </a>\n  </div>\n\n  <a class="btn btn-xs btn-danger remover" data-ng-click="onRemove()">\n    <i class="fa fa-minus"></i>\n  </a>\n</div>\n'),e.put("influents-elastic-builder/RuleDirective.html",'<div class="elastic-builder-rule">\n  <md-input-container>\n    <label>Field</label>\n    <md-select data-ng-model="rule.field" class="form-control">\n      <md-option ng-value="key" ng-repeat="(key, value) in elasticFields">{{key}}</md-option>\n    </md-select>\n  </md-input-container>\n\n  <span data-elastic-type="getType()" data-rule="rule" data-guide="elasticFields[rule.field]"></span>\n\n  <md-button class="md-icon-button md-accent remover" aria-label="Remove" title="Remove" data-ng-click="onRemove()">\n    <md-icon md-font-icon="icon-minus"></md-icon>\n  </md-button>\n\n</div>\n'),e.put("influents-elastic-builder/types/Boolean.html",'<span class="boolean-rule">\n  Equals\n\n  \x3c!-- This is a weird hack to make sure these are numbers --\x3e\n  <md-input-container>\n    <md-select data-ng-model="rule.value" class="form-control">\n      <md-option ng-value="booleans.indexOf(choice)" ng-repeat="choice in booleansOrder">{{choice}}</md-option>\n    </md-select>\n  </md-input-container>\n</span>\n'),e.put("influents-elastic-builder/types/Date.html",'<span class="date-rule form-inline">\n  <md-input-container>\n    <md-select data-ng-model="rule.subType" class="form-control">\n      \x3c!--  Exact --\x3e\n      <md-optgroup label="Exact">\n        <md-option value="equals">=</md-option>\n      </md-optgroup>\n\n      \x3c!-- Unbounded Range Options --\x3e\n      <md-optgroup label="Unbounded-range">\n        <md-option value="gt">&gt;</md-option>\n        <md-option value="gte">&ge;</md-option>\n        <md-option value="lt">&lt;</md-option>\n        <md-option value="lte">&le;</md-option>\n      </md-optgroup>\n\n      \x3c!--  Bounded Range --\x3e\n      <md-optgroup label="Bounded-range">\n        <md-option value="last">In the last</md-option>\n        <md-option value="next">In the next</md-option>\n      </md-optgroup>\n\n      \x3c!-- Generic Options --\x3e\n      <md-optgroup label="Generic">\n        <md-option value="exists">Exists</md-option>\n        <md-option value="notExists">! Exists</md-option>\n      </md-optgroup>\n\n    </md-select>\n  </md-input-container>\n\n  <md-datepicker\n    data-ng-if="inputNeeded()"\n    data-ng-model="rule.date"\n    md-placeholder="Enter date"\n    data-ng-required="true"\n  ></md-datepicker>\n\n  <md-input-container data-ng-if="inputNeeded()">\n    <label>Format</label>\n    <md-select data-ng-model="rule.dateFormat" class="form-control">\n      <md-option ng-value="format" ng-repeat="format in formats">{{format}}</md-option>\n    </md-select>\n  </md-input-container>\n\n  <md-input-container data-ng-if="numberNeeded()">\n    <label>Days</label>\n    <input type="number" class="form-control" data-ng-model="rule.value" min=0>\n  </md-input-container>\n</span>\n'),e.put("influents-elastic-builder/types/Multi.html",'<span class="multi-rule">\n  <span data-ng-repeat="choice in guide.choices">\n    <md-checkbox data-ng-model="rule.values[choice]" aria-label="{{ choice }}">\n      {{ choice }}\n    </md-checkbox>\n  </span>\n</span>\n'),e.put("influents-elastic-builder/types/Number.html",'<span class="number-rule">\n  <md-input-container>\n    <md-select data-ng-model="rule.subType" class="form-control">\n\n      \x3c!-- Term Options --\x3e\n      <md-optgroup label="Numeral">\n        <md-option value="equals">=</md-option>\n        <md-option value="gt">&gt;</md-option>\n        <md-option value="gte">&ge;</md-option>\n        <md-option value="lt">&lt;</md-option>\n        <md-option value="lte">&le;</md-option>\n      </md-optgroup>\n\n      \x3c!-- Generic Options --\x3e\n      <md-optgroup label="Generic">\n        <md-option value="exists">Exists</md-option>\n        <md-option value="notExists">! Exists</md-option>\n      </md-optgroup>\n\n    </md-select>\n  </md-input-container>\n  <md-input-container>\n    <label>Value</label>\n    \x3c!-- Range Fields --\x3e\n    <input data-ng-if="inputNeeded()"\n      class="form-control"\n      data-ng-model="rule.value"\n      type="number"\n      min="{{ guide.minimum }}"\n      max="{{ guide.maximum }}">\n  </md-input-container>\n\n</span>\n'),e.put("influents-elastic-builder/types/Term.html",'<span class="elastic-term">\n  <md-input-container>\n    <md-select data-ng-model="rule.subType" class="form-control">\n\n      \x3c!-- Term Options --\x3e\n      <md-optgroup label="Text">\n        <md-option value="equals">Equals</md-option>\n        <md-option value="notEquals">! Equals</md-option>\n      </md-optgroup>\n\n      \x3c!-- Generic Options --\x3e\n      <md-optgroup label="Generic">\n        <md-option value="exists">Exists</md-option>\n        <md-option value="notExists">! Exists</md-option>\n      </md-optgroup>\n\n    </md-select>\n  </md-input-container>\n  <md-input-container>\n    <label>Value</label>\n    <input\n      data-ng-if="inputNeeded()"\n      class="form-control"\n      data-ng-model="rule.value"\n      type="text">\n  </md-input-container>\n</span>\n')}])}(window.angular);